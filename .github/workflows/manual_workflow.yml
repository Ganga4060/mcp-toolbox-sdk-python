name: Manual Log Exporter

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to re-check for failures'
        required: true
        type: string

jobs:
  # STEP 1: Find failures for the manually specified PR.
  detect-build-failure:
    name: Detect Cloud Build Failures (Manual)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: read
      pull-requests: read 
    outputs:
      failure_detected: ${{ steps.detect_failures.outputs.failure_detected }}
      failed_checks: ${{ steps.detect_failures.outputs.failed_checks }}
      pr_number: ${{ steps.detect_failures.outputs.pr_number }}
    steps:
      - name: Get PR Info and Detect Failures
        id: detect_failures
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = '${{ github.event.inputs.pr_number }}';
            core.setOutput('pr_number', pr_number);
            const { owner, repo } = context.repo;
            // Use the API to get the commit SHA from the PR number
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: pr_number });
            const sha = pr.head.sha;
            core.info(`Found SHA ${sha} for PR #${pr_number}`);
            const prefixes = ['core-python-sdk-pr-', 'langchain-python-sdk-pr-', 'llamaindex-python-sdk-pr-'];
            const { data: checks } = await github.rest.checks.listForRef({ owner, repo, ref: sha, per_page: 100 });
            const failed = checks.check_runs.filter(
              c =>
                prefixes.some(prefix => c.name.startsWith(prefix)) &&
                c.status === 'completed' &&
                c.conclusion === 'failure'
            );
            if (failed.length === 0) {
              core.info('No failed Cloud Build checks detected for this PR.');
              core.setOutput('failure_detected', 'false');
              return;
            }
            core.info(`Detected ${failed.length} failed build(s) for this PR.`);
            core.setOutput('failure_detected', 'true');
            core.setOutput('failed_checks', JSON.stringify(failed.map(f => ({ name: f.name, id: f.id, html_url: f.html_url, details_url: f.details_url, external_id: f.external_id || '' }))));

  # STEP 2: Process each failure found in Job 1.
  process-failed-builds:
    needs: detect-build-failure
    if: needs.detect-build-failure.outputs.failure_detected == 'true'
    runs-on: ubuntu-latest
    env:
      GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-build-failure.outputs.failed_checks) }}
    steps:
      - name: Parse build ID and set project ID
        id: parse_build_info
        run: |
          details_url="${{ matrix.details_url }}"
          build_id=$(echo "$details_url" | sed -n 's#.*/builds/\([^?]*\).*#\1#p')
          project_id=$(echo '${{ env.GCLOUD_SERVICE_KEY }}' | jq -r '.project_id')
          echo "Build ID: $build_id"
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "project_id=$project_id" >> $GITHUB_OUTPUT
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCLOUD_SERVICE_KEY }}
      - name: Fetch Cloud Build logs
        id: fetch_cloud_build_logs
        run: |
          LOG_FILE="cloudbuild_error_logs.txt"
          gcloud builds log "${{ steps.parse_build_info.outputs.build_id }}" --project="${{ steps.parse_build_info.outputs.project_id }}" > "${LOG_FILE}" 2>&1 || true
          if [ ! -s "${LOG_FILE}" ]; then
            echo "Warning: No logs found with gcloud builds log." > "${LOG_FILE}"
            echo "Log URL: ${{ matrix.details_url }}" >> "${LOG_FILE}"
          fi
          echo "log_file_name=${LOG_FILE}" >> $GITHUB_OUTPUT
      - name: Upload Logs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.name }}-${{ steps.parse_build_info.outputs.build_id }}
          path: ${{ steps.fetch_cloud_build_logs.outputs.log_file_name }}
          retention-days: 7

  # step 4: Post a single, final comment on the PR with links to all artifacts.
  post-pr-comment:
    needs: [detect-build-failure, process-failed-builds] # You can remove gather-artifacts-summary
    runs-on: ubuntu-latest
    if: always()
    permissions:
      actions: read 
      issues: write  
    steps:
      - name: Compose and post PR comment with artifact links
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ needs.detect-build-failure.outputs.pr_number }}
        with:
          github-token: ${{ secrets.GH_BOT_TOKEN }}
          script: |
            // This script is now guaranteed to run if a PR number was found.
            const prNumber = process.env.PR_NUMBER;
            if (!prNumber) {
              core.info('No PR number found, skipping comment.');
              return;
            }
            const { owner, repo } = context.repo;
            const run_id = context.runId;
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({ owner, repo, run_id });
            const logArtifacts = artifacts.artifacts.filter(a => a.name.startsWith('logs-'));

            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: prNumber
            });
            const botLogin = 'Ganga4060';
            const existing = comments.find(c =>
              c.user && c.user.login === botLogin && c.body && c.body.includes('**Download Error logs:**')
            );

            if (logArtifacts.length > 0) {
              // Post or update the failure comment
              let body = 'ðŸ”— **Download Error logs:**\n\n';
              for (const artifact of logArtifacts) {
                const url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}/#artifacts`;
                const closingParenIndex = artifact.name.lastIndexOf(')');
                const displayName = (closingParenIndex !== -1) ? artifact.name.substring(0, closingParenIndex + 1) : artifact.name;
                body += `- [${displayName}](${url})\n`;
              }
              if (existing) {
                await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
                core.info('Updated existing bot comment.');
              } else {
                await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
                core.info('Posted new bot comment.');
              }
            } else if (existing) {
              await github.rest.issues.deleteComment({ owner, repo, comment_id: existing.id });
              core.info('Deleted previous artifact comment as all tests now pass.');
            } else {
              core.info('No artifact comment to update or delete.');
            }