
name: Export Cloud Build Failure Logs

on:
  workflow_run:
    workflows: ["Cloud Build"]
    types:
      - completed
  workflow_dispatch:

jobs:
  detect-build-failure:
    name: Detect Cloud Build Failure (all triggers)
    runs-on: ubuntu-latest
    env:
      GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
    permissions:
      contents: read
      checks: write
      issues: write
    outputs:
      failure_detected: ${{ steps.detect_failures.outputs.failure_detected }}
      failed_checks: ${{ steps.detect_failures.outputs.failed_checks }}
    steps:
      - name: Detect all failed Cloud Build checks
        id: detect_failures
        uses: actions/github-script@v7
        with:
          script: |
            const prefixes = [
              'core-python-sdk-pr-',
              'langchain-python-sdk-pr-',
              'llamaindex-python-sdk-pr-',
            ];
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) {
              core.setOutput('failure_detected', 'false');
              return;
            }
            const { owner, repo } = context.repo;
            const sha = context.payload.workflow_run.head_sha;
            const checks = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: sha,
              per_page: 100
            });
            const failed = checks.data.check_runs.filter(
              c =>
                prefixes.some(prefix => c.name.startsWith(prefix)) &&
                c.status === 'completed' &&
                c.conclusion === 'failure'
            );
            if (failed.length === 0) {
              core.setOutput('failure_detected', 'false');
              return;
            }
            core.setOutput('failure_detected', 'true');
            core.setOutput('failed_checks', JSON.stringify(failed.map(f => ({
              name: f.name,
              id: f.id,
              html_url: f.html_url,
              details_url: f.details_url,
              external_id: f.external_id || ''
            }))));


      - name: Set matrix for failed builds
        if: steps.detect_failures.outputs.failure_detected == 'true'
        id: set_matrix
        run: |
          echo "MATRIX={\"include\":$(echo '${{ steps.detect_failures.outputs.failed_checks }}') }" >> $GITHUB_OUTPUT

  process-failed-builds:
    needs: detect-build-failure
    if: needs.detect-build-failure.outputs.failure_detected == 'true'
    runs-on: ubuntu-latest
    env:
      GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
    strategy:
      matrix: ${{ fromJson(needs.detect-build-failure.outputs.failed_checks) }}
    steps:
      - name: Print failed build info
        run: |
          echo "Cloud Build check failed!"
          echo "Name: ${{ matrix.name }}"
          echo "ID: ${{ matrix.id }}"
          echo "HTML URL: ${{ matrix.html_url }}"
          echo "Details URL: ${{ matrix.details_url }}"
          echo "External ID: ${{ matrix.external_id }}"

      - name: Parse build ID and set project ID
        id: parse_build_info
        run: |
          details_url="${{ matrix.details_url }}"
          build_id=$(echo "$details_url" | sed -n 's#.*/builds/\([^?]*\).*#\1#p')
          project_id=$(echo "$GCLOUD_SERVICE_KEY" | jq -r '.project_id')
          echo "Build ID: $build_id"
          echo "Project ID: $project_id"
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "project_id=$project_id" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCLOUD_SERVICE_KEY }}

      - name: Fetch Cloud Build logs
        id: fetch_cloud_build_logs
        run: |
          LOG_FILE="cloudbuild_error_logs.txt"
          gcloud builds log "${{ steps.parse_build_info.outputs.build_id }}" \
            --project="${{ steps.parse_build_info.outputs.project_id }}" > "${LOG_FILE}" 2>&1 || true

          if [ ! -s "${LOG_FILE}" ]; then
            echo "Warning: No logs found with gcloud builds log. See the web UI for full logs:" > "${LOG_FILE}"
            echo "Log URL: ${{ matrix.details_url }}" >> "${LOG_FILE}"
          fi
          echo "log_file_name=${LOG_FILE}" >> $GITHUB_OUTPUT

      - name: Upload Logs as Artifact
        if: steps.fetch_cloud_build_logs.outputs.log_file_name != ''
        uses: actions/upload-artifact@v4
        with:
          name: cloud-build-failure-logs-${{ steps.parse_build_info.outputs.build_id }}
          path: ${{ steps.fetch_cloud_build_logs.outputs.log_file_name }}
          retention-days: 7

  post-pr-comment:
    needs: process-failed-builds
    runs-on: ubuntu-latest
    if: always() && needs.detect-build-failure.outputs.failure_detected == 'true'
    steps:
      - name: Compose and post PR comment with artifact links
        uses: actions/github-script@v7
        with:
          script: |
            // List all workflow run artifacts
            const { owner, repo } = context.repo;
            const pr = context.payload.workflow_run.pull_requests[0];
            if (!pr) {
              core.info('No PR found, skipping comment.');
              return;
            }
            const run_id = context.payload.workflow_run.id;
            // Get all artifacts for this run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id
            });
            if (!artifacts.data.artifacts.length) {
              core.info('No artifacts found.');
              return;
            }
            // Compose markdown with artifact links
            let body = '### :warning: Cloud Build Failure Logs\n';
            body += 'The following Cloud Build jobs failed. Download logs for details.\n\n';
            for (const artifact of artifacts.data.artifacts) {
              const name = artifact.name;
              const url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
              body += `- [${name}](${url})\n`;
            }
            body += '\n---\n';
            body += 'This comment was generated automatically by the export_build_logs workflow.';
            // Post comment to PR
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr.number,
              body
            });

      