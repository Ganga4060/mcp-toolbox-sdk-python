name: Export Cloud Build Failure Logs

# This trigger fires automatically when all checks for a commit are complete.
on:
  check_suite:
    types: [completed]

# Prevents race conditions from multiple rapid commits on the same PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # STEP 1: Find any and all failures that match our prefixes.
  detect-build-failure:
    name: Detect Cloud Build Failures
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: read
    outputs:
      failure_detected: ${{ steps.detect_failures.outputs.failure_detected }}
      failed_checks: ${{ steps.detect_failures.outputs.failed_checks }}
      pr_number: ${{ steps.detect_failures.outputs.pr_number }}
    steps:
      - name: Detect all failed Cloud Build checks
        id: detect_failures
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prefixes = [
              'core-python-sdk-pr-',
              'langchain-python-sdk-pr-',
              'llamaindex-python-sdk-pr-',
            ];
            const prList = context.payload.check_suite.pull_requests;
            if (!prList || prList.length === 0) {
              core.info('No PR found for this check suite. Skipping.');
              core.setOutput('failure_detected', 'false');
              return;
            }
            const pr_number = prList[0].number;
            core.setOutput('pr_number', pr_number.toString());
            const { owner, repo } = context.repo;
            const sha = context.payload.check_suite.head_sha;
            const { data: checks } = await github.rest.checks.listForRef({ owner, repo, ref: sha, per_page: 100 });
            const failed = checks.check_runs.filter(
              c =>
                prefixes.some(prefix => c.name.startsWith(prefix)) &&
                c.status === 'completed' &&
                c.conclusion === 'failure'
            );
            if (failed.length === 0) {
              core.info('No failed Cloud Build checks detected.');
              core.setOutput('failure_detected', 'false');
              return;
            }
            core.info(`Detected ${failed.length} failed build(s).`);
            core.setOutput('failure_detected', 'true');
            core.setOutput('failed_checks', JSON.stringify(failed.map(f => ({ name: f.name, id: f.id, html_url: f.html_url, details_url: f.details_url, external_id: f.external_id || '' }))));

  # STEP 2: Process each failure found in Job 1.
  process-failed-builds:
    needs: detect-build-failure
    if: needs.detect-build-failure.outputs.failure_detected == 'true'
    runs-on: ubuntu-latest
    env:
      GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-build-failure.outputs.failed_checks) }}
    steps:
      - name: Parse build ID and set project ID
        id: parse_build_info
        run: |
          details_url="${{ matrix.details_url }}"
          build_id=$(echo "$details_url" | sed -n 's#.*/builds/\([^?]*\).*#\1#p')
          project_id=$(echo '${{ env.GCLOUD_SERVICE_KEY }}' | jq -r '.project_id')
          echo "Build ID: $build_id"
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "project_id=$project_id" >> $GITHUB_OUTPUT
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCLOUD_SERVICE_KEY }}
      - name: Fetch Cloud Build logs
        id: fetch_cloud_build_logs
        run: |
          LOG_FILE="cloudbuild_error_logs.txt"
          gcloud builds log "${{ steps.parse_build_info.outputs.build_id }}" --project="${{ steps.parse_build_info.outputs.project_id }}" > "${LOG_FILE}" 2>&1 || true
          if [ ! -s "${LOG_FILE}" ]; then
            echo "Warning: No logs found with gcloud builds log." > "${LOG_FILE}"
            echo "Log URL: ${{ matrix.details_url }}" >> "${LOG_FILE}"
          fi
          echo "log_file_name=${LOG_FILE}" >> $GITHUB_OUTPUT
      - name: Upload Logs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.name }}-${{ steps.parse_build_info.outputs.build_id }}
          path: ${{ steps.fetch_cloud_build_logs.outputs.log_file_name }}
          retention-days: 7