name: Detect core-python-sdk-pr-py310 Failure-step3

on:
  check_run:
    types: [completed]
  workflow_dispatch:

jobs:
  detect-core-py310-failure:
    name: Detect core-python-sdk-pr-py310 Failure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: read
    steps:
      - name: Detect failing core-python-sdk-pr-py310 build
        id: detect_failure
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // Use the check_run event payload directly
              const check = context.payload.check_run;
              console.log('Received check_run event.');
              console.log('Check run object:', JSON.stringify(check, null, 2));

              // Detect check runs whose name starts with 'core-python-sdk-pr-py310'
              const isTargetCheck = check && check.name && check.name.startsWith('core-python-sdk-pr-py310');
              if (!isTargetCheck) {
                console.log(`This check run is not for core-python-sdk-pr-py310. Skipping. Name: '${check && check.name}'`);
                core.setOutput('failure_detected', 'false');
                return;
              }

              if (check.status === 'completed' && check.conclusion === 'failure') {
                console.log(`Check '${check.name}' has failed.`);
                core.setOutput('failure_detected', 'true');
                core.setOutput('name', check.name || 'Unknown');
                core.setOutput('id', check.id || '');
                core.setOutput('html_url', check.html_url || '');
                core.setOutput('details_url', check.details_url || '');
                core.setOutput('external_id', check.external_id || '');
              } else {
                console.log(`Check '${check.name}' has not failed.`);
                core.setOutput('failure_detected', 'false');
              }
            } catch (error) {
              console.error(`Unhandled error: ${error.message}`);
              core.setOutput('failure_detected', 'false');
              core.setFailed(`Failed to detect core-python-sdk-pr-py310 failure: ${error.message}`);
            }

      - name: Print detected failure details
        if: steps.detect_failure.outputs.failure_detected == 'true'
        run: |
          echo "core-python-sdk-pr-py310 build failed!"
          echo "Name: ${{ steps.detect_failure.outputs.name }}"
          echo "ID: ${{ steps.detect_failure.outputs.id }}"
          echo "HTML URL: ${{ steps.detect_failure.outputs.html_url }}"
          echo "Details URL: ${{ steps.detect_failure.outputs.details_url }}"
          echo "External ID: ${{ steps.detect_failure.outputs.external_id }}"
      #step2
      - name: Parse build ID and project from details_url
        if: steps.detect_failure.outputs.failure_detected == 'true'
        id: parse_build_info
        run: |
          # Example details_url: https://console.cloud.google.com/cloud-build/builds/ab4172bf-4e33-4090-a422-898ff479e5f9?project=499546161157
          details_url="${{ steps.detect_failure.outputs.details_url }}"
          build_id=$(echo "$details_url" | sed -n 's#.*/builds/\([^?]*\).*#\1#p')
          project_id=$(echo "$details_url" | sed -n 's#.*[?&]project=\([^&]*\).*#\1#p')
          echo "Build ID: $build_id"
          echo "Project ID: $project_id"
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "project_id=$project_id" >> $GITHUB_OUTPUT
      #step3
      - name: Authenticate to Google Cloud

        if: steps.detect_failure.outputs.failure_detected == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_KEY }}

      - name: Fetch Cloud Build logs
        if: steps.detect_failure.outputs.failure_detected == 'true'
        id: fetch_cloud_build_logs
        run: |
          LOG_FILE="cloudbuild_error_logs.txt"
          gcloud logging read "resource.type=cloud_build AND resource.labels.build_id=${{ steps.parse_build_info.outputs.build_id }}" \
            --project=${{ steps.parse_build_info.outputs.project_id }} \
            --format="text" > "${LOG_FILE}"

          if [ ! -s "${LOG_FILE}" ]; then
            echo "Warning: No specific logs found for build ID ${{ steps.parse_build_info.outputs.build_id }}. Fetching full build description instead."
            gcloud builds describe "${{ steps.parse_build_info.outputs.build_id }}" \
              --project=${{ steps.parse_build_info.outputs.project_id }} \
              --format="yaml" > "cloudbuild_details.yaml"
            echo "log_file_name=cloudbuild_details.yaml" >> $GITHUB_OUTPUT
          else
            echo "Logs successfully fetched to ${LOG_FILE}."
            echo "log_file_name=${LOG_FILE}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Logs as Artifact
        if: steps.detect_failure.outputs.failure_detected == 'true' && steps.fetch_cloud_build_logs.outputs.log_file_name != ''
        uses: actions/upload-artifact@v4
        with:
          name: cloud-build-failure-logs-${{ steps.parse_build_info.outputs.build_id }}
          path: ${{ steps.fetch_cloud_build_logs.outputs.log_file_name }}
          retention-days: 7