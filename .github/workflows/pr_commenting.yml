name: Post Failure Comment

# This trigger securely listens for the completion of the first workflow.
on:
  workflow_run:
    workflows: ["Export Cloud Build Failure Logs"]
    types:
      - completed

jobs:
  post-pr-comment:
    runs-on: ubuntu-latest
    # Run only if the first workflow succeeded and was associated with a PR.
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.pull_requests[0]
    permissions:
      # This job only needs permission to write to issues/PRs.
      actions: read
      issues: write
    steps:
      - name: Compose and post PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_BOT_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            // The workflow_run event payload contains all the info we need.
            const prNumber = context.payload.workflow_run.pull_requests[0].number;
            const source_run_id = context.payload.workflow_run.id;

            // Get the artifacts from the run that triggered this workflow.
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: source_run_id,
            });
            const logArtifacts = artifacts.artifacts.filter(a => a.name.startsWith('logs-'));
            
            // Find any existing comment from our bot.
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: prNumber });
            const botLogin = 'Ganga4060'; // Your bot's username
            const existing = comments.find(c =>
              c.user && c.user.login === botLogin && c.body && c.body.includes('**Download Error logs:**')
            );

            if (logArtifacts.length > 0) {
              // If there are failures, build and post/update the comment.
              let body = 'ðŸ”— **Download Error logs:**\n\n';
              const url = `https://github.com/${owner}/${repo}/actions/runs/${source_run_id}/#artifacts`;
              for (const artifact of logArtifacts) {
                const closingParenIndex = artifact.name.lastIndexOf(')');
                const displayName = (closingParenIndex !== -1) ? artifact.name.substring(0, closingParenIndex + 1) : artifact.name;
                body += `- [${displayName}](${url})\n`;
              }
              if (existing) {
                await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
                core.info(`Updated existing comment in PR #${prNumber}.`);
              } else {
                await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
                core.info(`Posted new comment in PR #${prNumber}.`);
              }
            } else if (existing) {
              // If there are no failures but an old comment exists, delete it.
              await github.rest.issues.deleteComment({ owner, repo, comment_id: existing.id });
              core.info(`Deleted previous failure comment in PR #${prNumber} as all tests now pass.`);
            } else {
              core.info('No failures found and no existing comment to delete.');
            }